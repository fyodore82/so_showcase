{"version":3,"sources":["Constants.ts","MainScreen/ApplicationBar.tsx","MainScreen/SideMenu.tsx","MainScreen/Home.tsx","MainScreen/MenuItem.tsx","Answer/InsertClassNameToItemBody.ts","Answer/ItemBody.tsx","Answer/AnswersList/AnswerListItem.tsx","Answer/AnswersList/AnswersList.tsx","MainScreen/index.tsx","serviceWorker.ts","store/Answers.ts","store/BackgroundTasks.ts","store/index.ts","index.tsx","ConfigureStore.ts"],"names":["AnswerTags","selectedAnswers","typescript","questions","react","redux","useStyles","makeStyles","theme","createStyles","appBar","width","marginLeft","ApplicationBar","classes","AppBar","position","className","Toolbar","Typography","variant","noWrap","drawer","flexShrink","drawerPaper","toolbar","mixins","content","flexGrow","backgroundColor","palette","background","default","padding","spacing","SideMenu","children","Drawer","paper","anchor","Divider","typography","margin","Home","Paper","paragraph","Link","href","MenuItem","to","name","Icon","ListItem","component","ListItemIcon","ListItemText","primary","InsertClassName","body","sub","replace","m","root","overflowWrap","ItemBody","bodyText","dangerouslySetInnerHTML","__html","marginBottom","heading","fontSize","pxToRem","fontWeight","fontWeightRegular","extensionDetail","flexDirection","expansionSummary","top","boxShadow","contentsGridItem","qaGridItem","AnswerListItem","header","question","answer","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","id","ExpansionPanelDetails","Grid","container","direction","item","answerList","overflowY","overflowX","AnswerList","answers","Object","entries","map","k","v","key","title","display","height","left","MunuAndRoutes","menuName","InboxIcon","route","exact","path","render","connect","state","isLoading","CssBaseline","List","values","Boolean","window","location","hostname","match","requestQAs","initalAnswersState","sagaActions","watchRequestAnswers","takeEvery","call","Axios","get","join","SOquestions","data","items","i","accepted_answer_id","SOanswers","reduce","p","e","put","type","tag","error","rootSaga","reducers","action","undefined","all","Answers","store","sagaMiddleware","createSagaMiddleware","mw","applyMiddleware","allReducers","combineReducers","buildRootReducer","createStore","run","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f4202ac.chunk.js","sourcesContent":["export const drawerWidth = 240;\r\n\r\nexport enum AnswerTags {\r\n  typescript = \"typescript\",\r\n  react = \"react\",\r\n  redux = \"redux\",\r\n}\r\n\r\nexport const selectedAnswers: {\r\n  [keys in AnswerTags]: {\r\n    questions: string[];\r\n  }\r\n} = {\r\n  typescript: {\r\n    questions: ['56749824']\r\n  },\r\n  react: {\r\n    questions: ['56979012']\r\n  },\r\n  redux: {\r\n    questions: [],\r\n  }\r\n}","import React, { FC } from 'react';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { drawerWidth } from '../Constants'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appBar: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  }),\r\n);\r\n\r\nexport const ApplicationBar: FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"fixed\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" noWrap>\r\n          My best answers on StackOverflow\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}","import React, { FC } from 'react';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport { drawerWidth } from '../Constants'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n      width: drawerWidth,\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      backgroundColor: theme.palette.background.default,\r\n      padding: theme.spacing(3),\r\n    },\r\n  }),\r\n);\r\n\r\nexport const SideMenu: FC = ({ children }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Drawer\r\n      className={classes.drawer}\r\n      variant=\"permanent\"\r\n      classes={{\r\n        paper: classes.drawerPaper,\r\n      }}\r\n      anchor=\"left\"\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      {children}\r\n    </Drawer>\r\n  )\r\n}","import React, { FC } from 'react';\r\n\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Link from '@material-ui/core/Link'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    typography: {\r\n      margin: '1rem',\r\n    },\r\n  }),\r\n);\r\n\r\nexport const Home: FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper>\r\n      <Typography paragraph className={classes.typography}>\r\n        This application will fetch selected posts from StackOverflow and present them\r\n        grouped by primary Tag.\r\n</Typography>\r\n      <Typography paragraph className={classes.typography}>\r\n        Application (SPA) is based on:\r\n      <ul>\r\n          <li>React</li>\r\n          <li>Typescript</li>\r\n          <li>Redux for storing state (questions and answers)</li>\r\n          <li>Redux-Saga for async actions like fetching posts</li>\r\n          <li>Storybook for developing components in isolation</li>\r\n          <li>Jest for unittesting</li>\r\n          <li>Material UI for building interface</li>\r\n        </ul>\r\n      </Typography>\r\n      <Typography paragraph className={classes.typography}>\r\n        Source is located on <Link href='https://github.com/fyodore82/so_showcase'>GitHub</Link>\r\n      </Typography>\r\n      <Typography paragraph className={classes.typography}>\r\n        Then app is built and put on gist where you can explore it.\r\n      </Typography>\r\n      <Typography paragraph className={classes.typography}>\r\n        Hope you enjoy it!\r\n      </Typography>\r\n    </Paper>\r\n  )\r\n}","import React, {FC, ComponentType} from 'react'\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface MenuItemOwnProps {\r\n    to: string;\r\n    name: string;\r\n    Icon: ComponentType;\r\n}\r\n\r\nexport const MenuItem: FC<MenuItemOwnProps> = ({to, name, Icon}) => (\r\n  <ListItem to={to} component={Link}>\r\n    <ListItemIcon><Icon /></ListItemIcon>\r\n    <ListItemText primary={name} />\r\n  </ListItem>\r\n)","import { string } from \"prop-types\";\r\n\r\n/*export function InsertClassName(body: string): string {\r\n  return body.split('<').reduce<string>((p, e) => {\r\n    if (e.substr(0, 4) === 'code')\r\n      p += `<code class='itembodycode'${e.substr(4)}`\r\n    else if (e.substr(0, 3) === 'pre')\r\n      p += `<pre class='itembodypre'${e.substr(3)}`\r\n    else if (e.substr(0, 1) === 'p')\r\n      p += `<p class='itembodyp'${e.substr(1)}`\r\n    else if (e)\r\n      p += `<${e}`\r\n    return p;\r\n  }, '')\r\n}*/\r\n\r\nexport function InsertClassName(body: string): string {\r\n  const sub: { [index: string]: string } = {\r\n    '<code>': \"<code class='itembodycode'>\",\r\n    '<pre>': \"<pre class='itembodypre'>\",\r\n    '<p>': \"<p class='itembodyp'>\",\r\n    /*'&gt;': '>',\r\n    '&lt;': '<',\r\n    '&amp;': '&',\r\n    '&quot;': '\"',\r\n    '&apos;': \"'\",*/\r\n  }\r\n  return body.replace(/<\\w+>/g, m => {\r\n    return sub[m] ? sub[m] : m;\r\n  })\r\n}","import React, { FC } from 'react'\r\nimport './ItemBody.css'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { InsertClassName } from './InsertClassNameToItemBody'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      overflowWrap: 'break-word',\r\n    },\r\n  }),\r\n);\r\n\r\n\r\ninterface ItemBodyOwnProps {\r\n  bodyText: string;\r\n}\r\n\r\nexport const ItemBody: FC<ItemBodyOwnProps> = ({ bodyText }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    \r\n    <div\r\n    className={classes.root} \r\n    dangerouslySetInnerHTML={{__html: InsertClassName(bodyText)}}/>\r\n  )\r\n}","import React, { FC } from 'react';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { ItemBody } from '../ItemBody'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginBottom: '4px',\r\n      width: '100%',\r\n    },\r\n    heading: {\r\n      fontSize: theme.typography.pxToRem(15),\r\n      fontWeight: theme.typography.fontWeightRegular,\r\n    },\r\n    extensionDetail: {\r\n      flexDirection: 'column',\r\n    },\r\n    expansionSummary: {\r\n      position: 'sticky',\r\n      top: 0,\r\n      backgroundColor: 'inherit',\r\n      boxShadow: '0px 2px gainsboro',\r\n    },\r\n    contentsGridItem: {\r\n      flexGrow: 1,\r\n    },\r\n    qaGridItem: {\r\n      fontSize: 'xx-large',\r\n      padding: '1rem',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface AnswerListItemOwnProps {\r\n  header: string;\r\n  question: string;\r\n  answer: string;\r\n}\r\n\r\nexport const AnswerListItem: FC<AnswerListItemOwnProps> = ({\r\n  header, question, answer\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          className={classes.expansionSummary}\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1a-content\"\r\n          id=\"panel1a-header\"\r\n        >\r\n          <Typography className={classes.heading} dangerouslySetInnerHTML={{ '__html': header }} />\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails className={classes.extensionDetail}>\r\n          <Grid container direction=\"column\">\r\n            <Grid item>\r\n              <Grid container direction=\"row\">\r\n                <Grid item className={classes.qaGridItem}>\r\n                  Q\r\n            </Grid>\r\n                <Grid item className={classes.contentsGridItem}>\r\n                  <ItemBody bodyText={question} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Divider/>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid container direction=\"row\">\r\n                <Grid item className={classes.qaGridItem}>\r\n                  A\r\n            </Grid>\r\n                <Grid item className={classes.contentsGridItem}>\r\n                  <ItemBody bodyText={answer} />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n\r\n    </div>\r\n  );\r\n}","import React, { FC } from 'react'\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { AnswerListItem } from './AnswerListItem'\r\n\r\nimport { Answers } from '../../store/Answers'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    answerList: {\r\n      overflowY: 'auto',\r\n      overflowX: 'hidden',\r\n    },\r\n  }),\r\n);\r\n\r\ninterface AnswerListOwnProps {\r\n  answers?: Answers;\r\n}\r\n\r\nexport const AnswerList: FC<AnswerListOwnProps> = ({ answers }) => {\r\n  const classes = useStyles()\r\n  return (<div className={classes.answerList}>\r\n    {answers && Object.entries(answers).map(([k, v]) => (\r\n      <AnswerListItem key={k} header={v.title} question={v.question} answer={v.answer} />\r\n    ))}\r\n    </div>\r\n  )\r\n}","import React, { FC } from 'react';\r\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\r\n\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport List from '@material-ui/core/List';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport { Route, BrowserRouter, Switch } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nimport { AnswerTags, drawerWidth } from '../Constants'\r\nimport { ApplicationBar } from './ApplicationBar'\r\nimport { SideMenu } from './SideMenu'\r\nimport { Home } from './Home'\r\nimport { MenuItem } from './MenuItem'\r\nimport { AnswerList } from '../Answer/AnswersList/AnswersList'\r\nimport * as Answers from '../store/Answers';\r\nimport { ApplicationState } from '../store'\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: theme.mixins.toolbar,\r\n    content: {\r\n      flexGrow: 1,\r\n      backgroundColor: theme.palette.background.default,\r\n      padding: theme.spacing(3),\r\n\r\n      height: '100%',\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      left: drawerWidth,\r\n      top: 0,\r\n      position: \"absolute\",\r\n      display: 'flex',\r\n      flexDirection: 'column',\r\n    },\r\n  }),\r\n);\r\n\r\nconst MunuAndRoutes: {\r\n  [keys in AnswerTags]: {\r\n    menuName: JSX.Element;\r\n    route: (answers?: Answers.Answers) => JSX.Element;\r\n  }\r\n} = {\r\n  typescript: {\r\n    menuName: <MenuItem to='/typescript' name='TypeScript' Icon={InboxIcon} />,\r\n    route: answers => <Route exact path='/typescript' render={() => <AnswerList answers={answers} />} />,\r\n  },\r\n  react: {\r\n    menuName: <MenuItem to='/react' name='React' Icon={InboxIcon} />,\r\n    route: answers => <Route exact path='/react' render={() => <AnswerList answers={answers} />} />,\r\n  },\r\n  redux: {\r\n    menuName: <MenuItem to='/redux' name='Redux' Icon={InboxIcon} />,\r\n    route: answers => <Route exact path='/redux' render={() => <AnswerList answers={answers} />} />,\r\n  },\r\n}\r\n\r\ntype MainScreenStateProps = Answers.AnswersState;\r\n\r\ntype MainScreenProps = MainScreenStateProps;\r\n\r\nexport const MainScreen: FC<MainScreenProps> = ({ isLoading, answers }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    isLoading ? <div>Loading...</div>\r\n      :\r\n      <div className={classes.root}>\r\n        <CssBaseline />\r\n        <ApplicationBar />\r\n        <SideMenu>\r\n          <List>\r\n            <MenuItem to='/' name='Home' Icon={InboxIcon} />\r\n            {Object.values(MunuAndRoutes).map(m => m.menuName)}\r\n          </List>\r\n        </SideMenu>\r\n        <main className={classes.content}>\r\n          <div className={classes.toolbar} />\r\n          <Switch>\r\n            {Object.entries(MunuAndRoutes).map(([k, v]) => v.route(answers[k as AnswerTags]))}\r\n            <Route exact path='/' component={Home} />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default connect<MainScreenStateProps, {}, {}, ApplicationState>\r\n  (state => state.answers)(MainScreen)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Reducer, Action } from 'redux';\r\nimport { takeEvery, call, put } from 'redux-saga/effects';\r\nimport Axios from 'axios';\r\n\r\nimport { selectedAnswers, AnswerTags } from '../Constants'\r\n\r\nexport interface Answer {\r\n  title: string;\r\n  question: string;\r\n  answer: string;\r\n}\r\n\r\nexport type Answers = { [questionId: string]: Answer };\r\n\r\nexport interface AnswersState {\r\n  answers: { [keys in AnswerTags]?: Answers };\r\n  isLoading: boolean;\r\n  error?: string;\r\n}\r\n\r\nexport const initalAnswersState: AnswersState = {\r\n  answers: {},\r\n  isLoading: false,\r\n}\r\n\r\ninterface SOQuestions {\r\n  items: {\r\n    \"accepted_answer_id\": number;\r\n    \"title\": string;\r\n    \"body\": string;\r\n  }[];\r\n}\r\n\r\ninterface SOAnswers {\r\n  items: {\r\n    \"body\": string;\r\n  }[];\r\n}\r\n\r\nexport const sagaActions = [\r\n  function* watchRequestAnswers() {\r\n    yield takeEvery<RequestQAsAction>('REQUEST_QA', requestQAs)\r\n  }\r\n];\r\n\r\nfunction* requestQAs() {\r\n  try {\r\n    let k: AnswerTags;\r\n    for (k in selectedAnswers) {\r\n      const { data: SOquestions }: { data: SOQuestions } = yield call(Axios.get,\r\n        `https://api.stackexchange.com/2.2/questions/${selectedAnswers[k].questions.join(';')}?site=stackoverflow&filter=withbody`)\r\n      const { data: SOanswers }: { data: SOAnswers } = yield call(Axios.get,\r\n        `https://api.stackexchange.com/2.2/answers/${SOquestions.items.map(i => i.accepted_answer_id).join(';')}?site=stackoverflow&filter=withbody`)\r\n      const answers: Answers = SOquestions.items.reduce<Answers>((p, e, i) => {\r\n        p[e.accepted_answer_id] = {\r\n          title: e.title,\r\n          question: e.body,\r\n          answer: SOanswers.items[i].body,\r\n        }\r\n        return p;\r\n      }, {});\r\n      yield put<ReceiveQAsAction>({ type: 'RECEIVE_QA', tag: k, answers })\r\n    }\r\n  }\r\n  catch (error) {\r\n    yield put<ReceiveQAsAction>({ type: 'RECEIVE_QA', error });\r\n  }\r\n}\r\n\r\nexport interface RequestQAsAction extends Action { type: 'REQUEST_QA' }\r\ninterface ReceiveQAsAction extends Action { type: 'RECEIVE_QA'; error?: string, answers?: Answers, tag?: AnswerTags }\r\n\r\ntype KnownActions = RequestQAsAction | ReceiveQAsAction;\r\n\r\nexport const reducer: Reducer<AnswersState, KnownActions> = (state = initalAnswersState, action) => {\r\n  switch (action.type) {\r\n    case 'REQUEST_QA':\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        answers: {},\r\n        error: undefined,\r\n      }\r\n    case 'RECEIVE_QA':\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        answers: action.tag && action.answers ? {\r\n          ...state.answers,\r\n          [action.tag]: {\r\n            ...state.answers[action.tag],\r\n            ...action.answers,\r\n          }\r\n        } : state.answers,\r\n        error: action.error,\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}","import { put } from 'redux-saga/effects'\r\nimport { RequestQAsAction } from './Answers'\r\n\r\nexport const sagaActions = [\r\n  function* requestQAs () {\r\n    yield put<RequestQAsAction>({ type: 'REQUEST_QA' });\r\n  } \r\n]","import { all, call } from 'redux-saga/effects'\r\nimport * as Answers from './Answers';\r\n\r\nimport { sagaActions } from './BackgroundTasks'\r\n\r\nexport interface ApplicationState {\r\n  answers: Answers.AnswersState;\r\n}\r\n\r\nexport const reducers = {\r\n  answers: Answers.reducer,\r\n}\r\n\r\nexport function* rootSaga() {\r\n  yield all([\r\n    ...Answers.sagaActions.map(call),\r\n    ...sagaActions.map(call),\r\n  ])\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MainScreen from './MainScreen';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport configureStore from './ConfigureStore'\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <MainScreen />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware, combineReducers, Store, StoreEnhancerStoreCreator, ReducersMapObject } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport { ApplicationState, reducers, rootSaga } from './store';\r\n\r\nexport default function configureStore() {\r\n\t// Build middleware. These are functions that can process the actions before they reach the store.\r\n\t//const windowIfDefined = typeof window === 'undefined' ? null : window as any;\r\n\t// If devTools is installed, connect to it\r\n\t//const devToolsExtension = windowIfDefined && windowIfDefined.__REDUX_DEVTOOLS_EXTENSION__ as () => GenericStoreEnhancer;\r\n  //let enhst = devToolsExtension ? devToolsExtension() : <S>(next: StoreEnhancerStoreCreator<S>) => next;\r\n\r\n  const sagaMiddleware = createSagaMiddleware();\r\n\tlet mw = applyMiddleware(sagaMiddleware);\r\n\t\r\n\t// Combine all reducers and instantiate the app-wide store instance\r\n\tconst allReducers = buildRootReducer(reducers);\r\n\r\n\tlet store = createStore(allReducers, mw); //compose(mw, enhst));\r\n\tsagaMiddleware.run(rootSaga);\r\n\r\n\treturn store;\r\n}\r\n\r\nfunction buildRootReducer(allReducers: any) {\r\n\treturn combineReducers<ApplicationState>({ ...allReducers/*, routing: routerReducer*/ });\r\n}"],"sourceRoot":""}