import React from 'react';
import { action } from '@storybook/addon-actions';
import { storiesOf } from '@storybook/react';
import { AnswerList } from '../AnswersList'
import { Answers } from '../../../store/Answers';

const answers: Answers = {
  '56749824': {
    title: "Type &#39;{}&#39; is not assignable to type &#39;T&#39;",
    question: "<pre><code>function f1&lt;T extends {[prop: string]: any}}&gt;(a: T = {}) {\n    console.log(a)\n}\n</code></pre>\n\n<blockquote>\n  <p>Error: Type '{}' is not assignable to type 'T'.</p>\n</blockquote>\n\n<p>im trying to give a a default value. im not trying to give T a default type. </p>\n\n<p>I'm not sure what is the problem.</p>\n",
    answer: "<p>Consider  the following example</p>\n\n<pre><code>type A = { [prop: string]: any };\ntype B = { [prop: string]: any; prop1: string };\n</code></pre>\n\n<p>Does type <code>B</code> extend type <code>A</code>? Yes!</p>\n\n<p>But the following will not work</p>\n\n<pre><code>let a: A = {};\nlet b: B = a; // Error\n</code></pre>\n\n<p>It's clear that type <code>A</code> misses required property <code>prop1</code>, so variable <code>a</code> is not assignable to variable <code>b</code>.</p>\n\n<p>The same issue is with your function. When you do</p>\n\n<pre><code>function f1&lt;T extends { [prop: string]: any }&gt;(a: T = {}) {\n    console.log(a);\n}\n</code></pre>\n\n<p>Compiler says that object <code>{}</code> is not assignable to type <code>T</code>. If this worked, you could do</p>\n\n<pre><code>f1&lt;B&gt;();  // a will equal to {} and misses required prop1\n</code></pre>\n\n<p>This may not look like error, as inside <code>f1</code> you only know that <code>T extends { [prop: string]: any }</code> and know nothing about <code>prop1</code>. But consider if you want return <code>T</code>:</p>\n\n<pre><code>function f1&lt;T extends { [prop: string]: any }&gt;(a: T = {}): T {\n    console.log(a);\n    return a;\n}\n</code></pre>\n\n<p>If this code would work it would introduce a bug</p>\n\n<pre><code>let bb: B = f1&lt;B&gt;();  // Here bb will be equal to empty object\nlet s: string = bb.prop1;  // Compiler will not show error, as it thinks that bb has prop1 of type string. But in reality it is undefined.\n</code></pre>\n\n<p>So there are following solutions to consider:</p>\n\n<ol>\n<li><p>Remove all generics. Type <code>{ [prop: string]: any }</code> is generic by itself so it may suit your needs</p>\n\n<pre><code>function f1(a: { [prop: string]: any } = {}) {\n    console.log(a);\n    return a;\n}\n</code></pre></li>\n<li><p>Make <code>a</code> fully optional. In this case <code>a</code> may equal to <code>undefined</code> and compiler would know about it. </p>\n\n<pre><code>function f1&lt;T extends { [prop: string]: any } = {}&gt;(a?: T) {\n    console.log(a);\n}\n</code></pre>\n\n<p>If you return <code>a</code> compiler will tell you that you should either return union type (with <code>undefined</code>) or check in function body that <code>a</code> is not <code>undefined</code>.</p></li>\n<li><p>Worst case from my point of view is to use type cast as already suggested</p>\n\n<pre><code>function f1&lt;T extends { [prop: string]: any }&gt;(a: T = {} as T) {\n    console.log(a);\n}\n</code></pre>\n\n<p>But be careful and don't forget that you can miss some required properties in this case.</p></li>\n</ol>\n",
  },
  '56979012': {
    title: "issue with types when using &quot;withRouter&quot; and Typescript",
    question: "<p>I'm trying to get some more deep knowledge and practice into React+Typescript, and I've come across this typing error when using <code>withRouter</code> from <code>react-router-dom</code>. </p>\n\n<p>My code snippet is very simple, and I've tried finding out people with the same issue, and some of the answers pointed to an error with an upgrade (but they were from 2016, so...) and some of them were using a <code>connect()</code> statement which I am not making use of (which lead to the question, \"Am I doing this wrong because of not using it?\"). I see that some of those suggestions also involved mapping Props to State, which I haven't done (nor seen) until now. I hope someone has some suggestions on what am I missing and what else I should be looking at.</p>\n\n<p>The code is:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\ninterface ISection {\n  id: number;\n  title: string;\n  imageUrl: string;\n  size: string;\n}\n\nclass MenuItem extends React.Component&lt;ISection&gt; {\n  render() {\n    return (\n      &lt;div className={`${this.props.size} menu-item`}&gt;\n        &lt;div\n          className=\"background-image\"\n          style={{ backgroundImage: `url(${this.props.imageUrl})` }}\n        /&gt;\n        &lt;div className=\"content\"&gt;\n          &lt;h1 className=\"title\"&gt;{this.props.title}&lt;/h1&gt;\n          &lt;span className=\"subtitle\"&gt;some subtitle&lt;/span&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default withRouter(MenuItem);\n</code></pre>\n\n<p>What I would be expecting from here is to work smoothly (I have to say that I tried first with a functional component since I don't have any state, but all the solutions I saw involved a class component, so I moved it into it), but instead I'm getting the following error on the <code>MenuItem</code> in the last line:</p>\n\n<pre><code>Argument of type 'typeof MenuItem' is not assignable to parameter of type 'ComponentClass&lt;RouteComponentProps&lt;any, StaticContext, any&gt;, any&gt; | FunctionComponent&lt;RouteComponentProps&lt;any, StaticContext, any&gt;&gt; | (FunctionComponent&lt;RouteComponentProps&lt;any, StaticContext, any&gt;&gt; &amp; ComponentClass&lt;...&gt;) | (ComponentClass&lt;...&gt; &amp; FunctionComponent&lt;...&gt;)'.\n  Type 'typeof MenuItem' is not assignable to type 'ComponentClass&lt;RouteComponentProps&lt;any, StaticContext, any&gt;, any&gt;'.\n    Types of parameters 'props' and 'props' are incompatible.\n      Type 'RouteComponentProps&lt;any, StaticContext, any&gt;' is missing the following properties from type 'Readonly&lt;ISection&gt;': id, title, imageUrl, sizets(2345)\n</code></pre>\n\n<p>My questions are:</p>\n\n<ol>\n<li><p>Why does it say \"type 'typeof MenuItem'\"? Shouldn't it just say the type of 'MenuItem' instead of the function to obtain the type?</p></li>\n<li><p>Is it necessary for withRouter to work with class components, or does it also work on functional components?</p></li>\n<li><p>Do I need to <code>connect()</code> something, or map Props onto State? If so, why?</p></li>\n<li><p>And lastly, how can I fix this?</p></li>\n</ol>\n",
    answer: "<p>As of <a href=\"https://github.com/ReactTraining/react-router/blob/e634f0bad7796d128a4c4e2c4678487dd7256be2/packages/react-router/docs/api/withRouter.md\" rel=\"noreferrer\">documentation</a>, <code>withRouter</code> will pass updated <code>match</code>, <code>location</code>, and <code>history</code> props to the wrapped component whenever it renders. </p>\n\n<p>So <code>MenuItem</code> component should have props to receive them. For now, <code>MenuItem</code> component has props of type <code>ISection</code> which does not include router props.</p>\n\n<p>The easiest way to add router props is to intersect <code>ISection</code> with <code>RouteComponentProps</code>.</p>\n\n<pre><code>import { withRouter, RouteComponentProps } from \"react-router-dom\";\n\n// ...\nclass MenuItem extends React.Component&lt;ISection &amp; RouteComponentProps&gt; {\n</code></pre>\n\n<p>Full code is</p>\n\n<pre><code>import * as React from 'react';\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\n\ninterface ISection {\n    id: number;\n    title: string;\n    imageUrl: string;\n    size: string;\n}\n\nclass MenuItem extends React.Component&lt;ISection &amp; RouteComponentProps&gt; {\n    render() {\n        return (\n            &lt;div className={`${this.props.size} menu-item`}&gt;\n                &lt;div\n                    className=\"background-image\"\n                    style={{ backgroundImage: `url(${this.props.imageUrl})` }}\n                /&gt;\n                &lt;div className=\"content\"&gt;\n                    &lt;h1 className=\"title\"&gt;{this.props.title}&lt;/h1&gt;\n                    &lt;span className=\"subtitle\"&gt;some subtitle&lt;/span&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        );\n    }\n}\n\nexport default withRouter(MenuItem);\n</code></pre>\n\n<p>And answers to your questions</p>\n\n<ol>\n<li><p>Why does it say \"type 'typeof MenuItem'\"? Shouldn't it just say the type of 'MenuItem' instead of the function to obtain the type?</p>\n\n<p>Error arisen from types incompatibility. <code>MenuItem</code> is class, not type. To get type of <code>MenuItem</code> you should use <code>typeof MenuItem</code>. So <code>typeof MenuItem</code> is type. And compiler says correctly, \"type <code>typeof MenuItem</code>\".</p></li>\n<li><p>Is it necessary for withRouter to work with class components, or does it also work on functional components?</p>\n\n<p>It is allowed to work with class component and with functional component.</p>\n\n<p>This is how your component will look like if implemented as functional</p>\n\n<pre><code>const Cmp1: React.FunctionComponent&lt;ISection &amp; RouteComponentProps&gt; = (props) =&gt; {\n    return (\n        &lt;div className={`${props.size} menu-item`}&gt;\n            &lt;div\n                className=\"background-image\"\n                style={{ backgroundImage: `url(${props.imageUrl})` }}\n            /&gt;\n            &lt;div className=\"content\"&gt;\n                &lt;h1 className=\"title\"&gt;{props.title}&lt;/h1&gt;\n                &lt;span className=\"subtitle\"&gt;some subtitle&lt;/span&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    );\n}\n\nconst WrappedCmp = withRouter(Cmp1);\n</code></pre></li>\n<li><p>Do I need to <code>connect()</code> something, or map Props onto State? If so, why?</p>\n\n<p>No, this is not strict requirement. <code>connect</code> is part of Redux, so if you use Redux you may connect. Here is <a href=\"https://github.com/ReactTraining/react-router/blob/e634f0bad7796d128a4c4e2c4678487dd7256be2/packages/react-router/docs/api/withRouter.md#important-note\" rel=\"noreferrer\">documentation</a> of how to use <code>withRouter</code> with <code>connect</code>. But again, it is not required.</p></li>\n<li><p>And lastly, how can I fix this?</p>\n\n<p>Already answered. See above :-)</p></li>\n</ol>\n",
  }
}

storiesOf('AnswerList', module)
  .add('default', () => <AnswerList answers={answers} isLoading={false}/>)
  .add('loading', () => <AnswerList isLoading={true}/>)